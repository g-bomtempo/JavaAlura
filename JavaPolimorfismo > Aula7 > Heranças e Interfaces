//AutenticacaoUtil


public class AutenticacaoUtil implements FuncionarioAutenticavel {
	
	private int senha;	
	
	public boolean autentica(int senha) {
		if (this.senha == senha) {
			return true;
		} else {
			return false;
		}		
	}
	
	public void setSenha(int senha) {
		this.senha = senha;	
		
	}
}

//Cliente


public class Cliente implements FuncionarioAutenticavel {

	private AutenticacaoUtil util;
	
	public Cliente() {
		this.util = new AutenticacaoUtil();
	}
	
	@Override
	public boolean autentica(int senha) {
		return this.util.autentica(senha);
		
	}

	@Override
	public void setSenha(int senha) {
		this.util.setSenha(senha);
	}

}


//ControleBonificacao


public class ControleBonificacao {
	
	private double soma;
	
	public void registra (Funcionario f) {
		double bonificacao = f.getBonificacao();
		this.soma = bonificacao + this.soma;
	}
	
	public double getSoma() {
		return soma;
	}


}

//Funcionario


public abstract class Funcionario {
	
	private String nome;
	private String cpf;
	private double salario;
	
	
	public Funcionario(){
	}	

	public String getNome() {
		return nome;
	}
	public void setNome(String nome) {
		this.nome = nome;
	}
	public String getCpf() {
		return cpf;
	}
	public void setCpf(String cpf) {
		this.cpf = cpf;
	}
	public double getSalario() {
		return salario;
	}
	public void setSalario(double salario) {
		this.salario = salario;
	}
	
	public abstract double getBonificacao();

//FuncionarioAutenticavel

// quem utilizar essa interface, precisa implementar:
	// metodo autentica
	// metodo setSenha

public abstract interface FuncionarioAutenticavel {	
	
	
	public abstract boolean autentica(int senha);
	
	public abstract void setSenha(int senha);
}


//Gerente

//gerente herda as funcoes criadas em funcionario

public class Gerente extends Funcionario implements FuncionarioAutenticavel {
	
	private AutenticacaoUtil util;
	private AutenticacaoUtil autenticador;
	
	public Gerente() {
		this.autenticador = new AutenticacaoUtil();
	}
	
	public double getBonificacao() {		
		return super.getSalario();
}
	@Override
	public boolean autentica(int senha) {
		return this.util.autentica(senha);
		
	}

	@Override
	public void setSenha(int senha) {
		this.util.setSenha(senha);
	}
}


//SistemaInterno


public class SistemaInterno {
	
	private int senha =2222;
	
	public void autentica(FuncionarioAutenticavel g) {
		boolean autenticou = g.autentica(this.senha);
		if (autenticou) {
			System.out.println("Acesso liberado");
		} else {
			System.out.println("Acesso negado");
		}
	}

}


//TesteFuncionario


public class TesteFuncionario {

	public static void main(String[] args) {
		
		Funcionario gabriel = new Gerente();
		gabriel.setNome("Gabriel Bomtempo");
		gabriel.setCpf("222.222.222-22");
		gabriel.setSalario(3000);
		
		
		System.out.println("O nome do funcionario é " + gabriel.getNome());
		System.out.println("Seu CPF é " + gabriel.getCpf());
		System.out.println("Seu salário é: " + gabriel.getSalario() + " com uma bonificação de " + gabriel.getBonificacao());
		
		
		Gerente michel = new Gerente();
		michel.setNome("Michel");
		michel.setCpf("22222222");
		michel.setSalario(10000);
		
		System.out.println("O nome do funcionario é " + michel.getNome());
		System.out.println("Seu CPF é " + michel.getCpf());
		System.out.println("Seu salário é: " + michel.getSalario() + " com uma bonificação de " + michel.getBonificacao());
		
		
		michel.setSenha(2222);
		SistemaInterno si = new SistemaInterno();
		si.autentica(michel);
		//System.out.println(michel.autentica(2222));		
		
	}

}

//TesteReferencias


public class TesteReferencias {

	public static void main(String[] args) {
		
		Funcionario g1 = new Gerente();
		
		g1.setNome("Galo");
		
		System.out.println(g1.getNome());
		

	}

}

			
